---
import { languages, defaultLanguage, languageFlags } from '../../i18n/config';
import { getAvailableLanguages } from '../../i18n/translations';

const { currentLanguage = defaultLanguage } = Astro.props;
const currentPath = Astro.url.pathname;

// Get all available languages from translation files
const availableLanguages = getAvailableLanguages();

// Get path without language prefix
let pathWithoutLang = currentPath;
const segments = currentPath.split('/');
if (segments[1] && Object.keys(languages).includes(segments[1])) {
  // Remove language segment
  segments.splice(1, 1);
  pathWithoutLang = segments.join('/') || '/';
}
---

<div class="language-toggle relative">
  <button 
    id="language-menu-button" 
    type="button"
    aria-expanded="false"
    aria-haspopup="true"
    class="flex items-center justify-between gap-1 px-3 py-2 text-sm font-medium text-neutral-700 hover:text-primary-500 dark:text-neutral-300 dark:hover:text-primary-400"
  >
    <span class="sr-only">Select language</span>
    <span aria-hidden="true" class="flex items-center">
      {languageFlags[currentLanguage] || 'üåê'} {languages[currentLanguage]}
    </span>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="size-4 ml-1 transition-transform" aria-hidden="true">
      <path fill-rule="evenodd" d="M4.22 6.22a.75.75 0 0 1 1.06 0L8 8.94l2.72-2.72a.75.75 0 1 1 1.06 1.06l-3.25 3.25a.75.75 0 0 1-1.06 0L4.22 7.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd" />
    </svg>
  </button>
  
  <div 
    id="language-menu" 
    class="absolute left-0 top-full z-50 mt-1 hidden w-40 origin-top-left rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-neutral-800 dark:ring-neutral-700" 
    role="menu" 
    aria-orientation="vertical" 
    aria-labelledby="language-menu-button" 
    tabindex="-1"
  >
    <div class="py-1">
      {availableLanguages.map((code) => {
        // Only show languages defined in our languages config
        if (!languages[code]) return null;
        
        const targetPath = code === defaultLanguage ? pathWithoutLang : `/${code}${pathWithoutLang}`;
        return (
          <a 
            href={targetPath}
            class={`block px-4 py-2 text-sm ${code === currentLanguage ? 'bg-neutral-100 text-primary-600 dark:bg-neutral-700 dark:text-primary-400' : 'text-neutral-700 hover:bg-neutral-50 dark:text-neutral-300 dark:hover:bg-neutral-700'}`}
            role="menuitem"
            tabindex="-1"
            data-lang-path={targetPath}
          >
            {languageFlags[code] || 'üåê'} {languages[code]}
          </a>
        );
      })}
    </div>
  </div>
</div>

<script>
document.addEventListener('astro:page-load', () => {
  const button = document.getElementById('language-menu-button');
  const menu = document.getElementById('language-menu');
  
  if (button && menu) {
    // Position menu based on available space
    const positionMenu = () => {
      const buttonRect = button.getBoundingClientRect();
      const viewportHeight = window.innerHeight;
      const spaceBelow = viewportHeight - buttonRect.bottom;
      const spaceNeeded = menu.offsetHeight + 8; // Add a small buffer
      
      // Check if mobile view (based on viewport width or specific breakpoint)
      const isMobile = window.innerWidth < 768;
      
      if (isMobile) {
        // On mobile, always position dropdown below the button
        menu.style.top = 'calc(100% + 4px)';
        menu.style.bottom = 'auto';
        menu.style.left = '0';
        menu.style.right = 'auto';
        menu.style.maxHeight = '60vh'; // Limit height on mobile
        menu.style.overflowY = 'auto'; // Enable scrolling if needed
      } else {
        // On desktop, check if there's enough space below
        if (spaceBelow < spaceNeeded) {
          // Not enough space below, position above
          menu.style.bottom = 'calc(100% + 4px)';
          menu.style.top = 'auto';
        } else {
          // Enough space below, position below
          menu.style.top = 'calc(100% + 4px)';
          menu.style.bottom = 'auto';
        }
        
        // Handle RTL layout
        const isRTL = document.documentElement.dir === 'rtl';
        if (isRTL) {
          menu.style.right = '0';
          menu.style.left = 'auto';
        } else {
          menu.style.left = '0';
          menu.style.right = 'auto';
        }
      }
    };
    
    // Toggle dropdown
    button.addEventListener('click', () => {
      const expanded = button.getAttribute('aria-expanded') === 'true';
      button.setAttribute('aria-expanded', (!expanded).toString());
      
      if (!expanded) {
        // Show the menu
        menu.classList.remove('hidden');
        positionMenu();
      } else {
        // Hide the menu
        menu.classList.add('hidden');
      }
      
      // Rotate the arrow icon
      const icon = button.querySelector('svg');
      if (icon) {
        icon.style.transform = expanded ? '' : 'rotate(180deg)';
      }
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', (event) => {
      if (!button.contains(event.target) && !menu.contains(event.target)) {
        button.setAttribute('aria-expanded', 'false');
        menu.classList.add('hidden');
        const icon = button.querySelector('svg');
        if (icon) {
          icon.style.transform = '';
        }
      }
    });
    
    // Close dropdown after selection and log the target path
    menu.querySelectorAll('a').forEach(link => {
      link.addEventListener('click', (e) => {
        const targetPath = link.getAttribute('data-lang-path');
        console.log(`Language changed - Navigating to: ${targetPath}`);
        
        button.setAttribute('aria-expanded', 'false');
        menu.classList.add('hidden');
      });
    });
    
    // Update position on window resize
    window.addEventListener('resize', () => {
      if (button.getAttribute('aria-expanded') === 'true') {
        positionMenu();
      }
    });
  }
});
</script>

<style>
  /* Language toggle styling */
  .language-toggle {
    position: relative;
    display: inline-block;
  }
  
  /* Ensure dropdown is visible in mobile view */
  @media (max-width: 767px) {
    #language-menu {
      width: auto;
      min-width: 150px;
      max-width: 80vw;
    }
  }
  
  /* RTL specific styles */
  html[dir="rtl"] #language-menu {
    left: auto;
    right: 0;
  }
</style>