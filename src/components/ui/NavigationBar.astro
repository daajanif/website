---
// Import dependencies
import LanguageToggle from './LanguageToggle.astro';
import ThemeSwitcher from './ModeSwitcher.astro';
import { defaultLanguage } from '../../i18n/config';
import { configData } from '../../config/config';
import { getTranslations, getAvailableLanguages } from '../../i18n/translations';

// Get current language from props or default
const { currentLanguage = defaultLanguage } = Astro.props;

// Get translations for current language
const t = getTranslations(currentLanguage);

console.log(`NavigationBar - Current language: ${currentLanguage}`);
console.log(`NavigationBar - Available languages: ${getAvailableLanguages().join(', ')}`);
console.log(`NavigationBar - Home link label: ${t.nav?.home}`);

// Navigation items from translations
const navItems = [
  { label: t.nav?.home || "Home", href: `${currentLanguage === defaultLanguage ? '' : '/' + currentLanguage}/#home` },
  { label: t.nav?.features || "Features", href: `${currentLanguage === defaultLanguage ? '' : '/' + currentLanguage}/#features` },
  { label: t.nav?.faq || "FAQ", href: `${currentLanguage === defaultLanguage ? '' : '/' + currentLanguage}/#faq` },
  { label: t.nav?.contact || "Contact", href: `${currentLanguage === defaultLanguage ? '' : '/' + currentLanguage}/#contact` }
];

// Is RTL
const isRtl = currentLanguage === 'ar';

// Define logo paths for light and dark modes
const lightLogo = configData.logo.src;
const darkLogo = configData.logo.darkSrc || configData.logo.src;
---

<header class="sticky top-0 z-40 w-full backdrop-blur flex-none transition-colors duration-500 lg:z-50 border-b border-slate-900/10 dark:border-slate-50/[0.06] bg-white/75 dark:bg-slate-900/75">
  <div class="max-w-8xl mx-auto">
    <div class="py-4 mx-4 lg:px-8 lg:mx-0">
      <div class="relative flex items-center">
        <!-- Logo section with light/dark variants -->
        <a class="flex-none" href={currentLanguage === defaultLanguage ? '/' : `/${currentLanguage}/`}>
          {configData.logo.src ? (
            <>
              <img id="light-logo" src={lightLogo} alt={configData.logo.alt} class="h-8 dark:hidden" />
              <img id="dark-logo" src={darkLogo} alt={configData.logo.alt} class="h-8 hidden dark:block" />
            </>
          ) : (
            <span class="font-bold text-xl">{configData.siteTitle}</span>
          )}
        </a>
        
        <!-- Navigation items -->
        <div class={`relative hidden lg:flex items-center ml-auto ${isRtl ? 'rtl:ml-0 rtl:mr-auto' : ''}`}>
          <nav class="text-sm leading-6 font-semibold text-slate-700 dark:text-slate-200">
            <ul class={`flex space-x-8 ${isRtl ? 'rtl:space-x-reverse' : ''}`}>
              {navItems.map((item) => (
                <li>
                  <a 
                    href={item.href} 
                    class="hover:text-primary-500 dark:hover:text-primary-400"
                  >
                    {item.label}
                  </a>
                </li>
              ))}
            </ul>
          </nav>
          
          <!-- Add theme and language toggles -->
          <div class={`ml-6 flex items-center border-l border-slate-200 dark:border-slate-800 pl-6 ${isRtl ? 'rtl:mr-6 rtl:ml-0 rtl:border-r rtl:border-l-0 rtl:pr-6 rtl:pl-0' : ''}`}>
            <!-- Theme toggle component -->
            <ThemeSwitcher />
            
            <!-- Language toggle -->
            <div class="relative ml-2">
              <LanguageToggle currentLanguage={currentLanguage} />
            </div>
          </div>
        </div>
        
        <!-- Mobile menu button -->
        <button 
          type="button" 
          class={`mobile-menu-button ${isRtl ? 'rtl:mr-auto rtl:ml-0' : 'ml-auto'} text-slate-500 w-8 h-8 -my-1 flex items-center justify-center lg:hidden`}
          aria-expanded="false"
        >
          <span class="sr-only">Open menu</span>
          <svg width="24" height="24" fill="none" viewBox="0 0 24 24" class="hamburger">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 7h16M4 12h16M4 17h16"></path>
          </svg>
          <svg width="24" height="24" fill="none" viewBox="0 0 24 24" class="close hidden">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
  
  <!-- Mobile menu (hidden by default) with RTL support -->
  <div class="mobile-menu hidden lg:hidden px-4 py-4 border-t border-slate-200 dark:border-slate-800">
    <nav class={`flex flex-col space-y-4 text-sm font-semibold text-slate-700 dark:text-slate-200 ${isRtl ? 'rtl:text-right' : ''}`}>
      {navItems.map((item) => (
        <a 
          href={item.href} 
          class="hover:text-primary-500 dark:hover:text-primary-400"
        >
          {item.label}
        </a>
      ))}
    </nav>
    
    <!-- Mobile theme and language toggles -->
    <div class={`flex ${isRtl ? 'rtl:flex-row-reverse' : ''} items-center mt-6 pt-4 border-t border-slate-200 dark:border-slate-800`}>
      <!-- Theme toggle for mobile -->
      <ThemeSwitcher />
      
      <!-- Mobile language toggle -->
      <div class={`${isRtl ? 'rtl:mr-3 rtl:ml-0' : 'ml-3'}`}>
        <LanguageToggle currentLanguage={currentLanguage} />
      </div>
    </div>
  </div>
</header>

<script>
  document.addEventListener('astro:page-load', () => {
    // Mobile menu toggle
    const mobileMenuButton = document.querySelector('.mobile-menu-button');
    const mobileMenu = document.querySelector('.mobile-menu');
    const hamburgerIcon = document.querySelector('.hamburger');
    const closeIcon = document.querySelector('.close');
    
    if (mobileMenuButton && mobileMenu && hamburgerIcon && closeIcon) {
      mobileMenuButton.addEventListener('click', () => {
        const expanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
        mobileMenuButton.setAttribute('aria-expanded', (!expanded).toString());
        mobileMenu.classList.toggle('hidden');
        hamburgerIcon.classList.toggle('hidden');
        closeIcon.classList.toggle('hidden');
      });
      
      // Close mobile menu when clicking navigation items
      document.querySelectorAll('.mobile-menu a').forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
          hamburgerIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
        });
      });
    }
    
    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', e => {
        const href = anchor.getAttribute('href');
        
        if (href && href !== '#') {
          e.preventDefault();
          
          // Get the target element
          const targetId = href.split('#')[1];
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            window.scrollTo({
              top: targetElement.offsetTop - 80,
              behavior: 'smooth'
            });
          }
        }
      });
    });
  });
</script>